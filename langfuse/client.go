// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package langfuse

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AnnotationQueuesListQueues request
	AnnotationQueuesListQueues(ctx context.Context, params *AnnotationQueuesListQueuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AnnotationQueuesGetQueue request
	AnnotationQueuesGetQueue(ctx context.Context, queueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AnnotationQueuesListQueueItems request
	AnnotationQueuesListQueueItems(ctx context.Context, queueId string, params *AnnotationQueuesListQueueItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AnnotationQueuesCreateQueueItemWithBody request with any body
	AnnotationQueuesCreateQueueItemWithBody(ctx context.Context, queueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AnnotationQueuesCreateQueueItem(ctx context.Context, queueId string, body AnnotationQueuesCreateQueueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AnnotationQueuesDeleteQueueItem request
	AnnotationQueuesDeleteQueueItem(ctx context.Context, queueId string, itemId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AnnotationQueuesGetQueueItem request
	AnnotationQueuesGetQueueItem(ctx context.Context, queueId string, itemId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AnnotationQueuesUpdateQueueItemWithBody request with any body
	AnnotationQueuesUpdateQueueItemWithBody(ctx context.Context, queueId string, itemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AnnotationQueuesUpdateQueueItem(ctx context.Context, queueId string, itemId string, body AnnotationQueuesUpdateQueueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommentsGet request
	CommentsGet(ctx context.Context, params *CommentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommentsCreateWithBody request with any body
	CommentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommentsCreate(ctx context.Context, body CommentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommentsGetById request
	CommentsGetById(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetItemsList request
	DatasetItemsList(ctx context.Context, params *DatasetItemsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetItemsCreateWithBody request with any body
	DatasetItemsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DatasetItemsCreate(ctx context.Context, body DatasetItemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetItemsDelete request
	DatasetItemsDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetItemsGet request
	DatasetItemsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetRunItemsList request
	DatasetRunItemsList(ctx context.Context, params *DatasetRunItemsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetRunItemsCreateWithBody request with any body
	DatasetRunItemsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DatasetRunItemsCreate(ctx context.Context, body DatasetRunItemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetsGetRuns request
	DatasetsGetRuns(ctx context.Context, datasetName string, params *DatasetsGetRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetsDeleteRun request
	DatasetsDeleteRun(ctx context.Context, datasetName string, runName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetsGetRun request
	DatasetsGetRun(ctx context.Context, datasetName string, runName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthHealth request
	HealthHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IngestionBatchWithBody request with any body
	IngestionBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IngestionBatch(ctx context.Context, body IngestionBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaGetUploadUrlWithBody request with any body
	MediaGetUploadUrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MediaGetUploadUrl(ctx context.Context, body MediaGetUploadUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaGet request
	MediaGet(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaPatchWithBody request with any body
	MediaPatchWithBody(ctx context.Context, mediaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MediaPatch(ctx context.Context, mediaId string, body MediaPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsMetrics request
	MetricsMetrics(ctx context.Context, params *MetricsMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelsList request
	ModelsList(ctx context.Context, params *ModelsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelsCreateWithBody request with any body
	ModelsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModelsCreate(ctx context.Context, body ModelsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelsDelete request
	ModelsDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelsGet request
	ModelsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObservationsGetMany request
	ObservationsGetMany(ctx context.Context, params *ObservationsGetManyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ObservationsGet request
	ObservationsGet(ctx context.Context, observationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationsGetOrganizationMemberships request
	OrganizationsGetOrganizationMemberships(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationsUpdateOrganizationMembershipWithBody request with any body
	OrganizationsUpdateOrganizationMembershipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationsUpdateOrganizationMembership(ctx context.Context, body OrganizationsUpdateOrganizationMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationsGetOrganizationProjects request
	OrganizationsGetOrganizationProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectsGet request
	ProjectsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectsCreateWithBody request with any body
	ProjectsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectsCreate(ctx context.Context, body ProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectsDelete request
	ProjectsDelete(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectsUpdateWithBody request with any body
	ProjectsUpdateWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectsUpdate(ctx context.Context, projectId string, body ProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectsGetApiKeys request
	ProjectsGetApiKeys(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectsCreateApiKeyWithBody request with any body
	ProjectsCreateApiKeyWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectsCreateApiKey(ctx context.Context, projectId string, body ProjectsCreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectsDeleteApiKey request
	ProjectsDeleteApiKey(ctx context.Context, projectId string, apiKeyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationsGetProjectMemberships request
	OrganizationsGetProjectMemberships(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationsUpdateProjectMembershipWithBody request with any body
	OrganizationsUpdateProjectMembershipWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationsUpdateProjectMembership(ctx context.Context, projectId string, body OrganizationsUpdateProjectMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScimGetResourceTypes request
	ScimGetResourceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScimGetSchemas request
	ScimGetSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScimGetServiceProviderConfig request
	ScimGetServiceProviderConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScimListUsers request
	ScimListUsers(ctx context.Context, params *ScimListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScimCreateUserWithBody request with any body
	ScimCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScimCreateUser(ctx context.Context, body ScimCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScimDeleteUser request
	ScimDeleteUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScimGetUser request
	ScimGetUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScoreConfigsGet request
	ScoreConfigsGet(ctx context.Context, params *ScoreConfigsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScoreConfigsCreateWithBody request with any body
	ScoreConfigsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScoreConfigsCreate(ctx context.Context, body ScoreConfigsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScoreConfigsGetById request
	ScoreConfigsGetById(ctx context.Context, configId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScoreCreateWithBody request with any body
	ScoreCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScoreCreate(ctx context.Context, body ScoreCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScoreDelete request
	ScoreDelete(ctx context.Context, scoreId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SessionsList request
	SessionsList(ctx context.Context, params *SessionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SessionsGet request
	SessionsGet(ctx context.Context, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceDeleteMultipleWithBody request with any body
	TraceDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TraceDeleteMultiple(ctx context.Context, body TraceDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceList request
	TraceList(ctx context.Context, params *TraceListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceDelete request
	TraceDelete(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceGet request
	TraceGet(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetsList request
	DatasetsList(ctx context.Context, params *DatasetsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetsCreateWithBody request with any body
	DatasetsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DatasetsCreate(ctx context.Context, body DatasetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DatasetsGet request
	DatasetsGet(ctx context.Context, datasetName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PromptsList request
	PromptsList(ctx context.Context, params *PromptsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PromptsCreateWithBody request with any body
	PromptsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PromptsCreate(ctx context.Context, body PromptsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PromptVersionUpdateWithBody request with any body
	PromptVersionUpdateWithBody(ctx context.Context, name string, version int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PromptVersionUpdate(ctx context.Context, name string, version int, body PromptVersionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PromptsGet request
	PromptsGet(ctx context.Context, promptName string, params *PromptsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScoreV2Get request
	ScoreV2Get(ctx context.Context, params *ScoreV2GetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScoreV2GetById request
	ScoreV2GetById(ctx context.Context, scoreId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AnnotationQueuesListQueues(ctx context.Context, params *AnnotationQueuesListQueuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnnotationQueuesListQueuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnnotationQueuesGetQueue(ctx context.Context, queueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnnotationQueuesGetQueueRequest(c.Server, queueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnnotationQueuesListQueueItems(ctx context.Context, queueId string, params *AnnotationQueuesListQueueItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnnotationQueuesListQueueItemsRequest(c.Server, queueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnnotationQueuesCreateQueueItemWithBody(ctx context.Context, queueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnnotationQueuesCreateQueueItemRequestWithBody(c.Server, queueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnnotationQueuesCreateQueueItem(ctx context.Context, queueId string, body AnnotationQueuesCreateQueueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnnotationQueuesCreateQueueItemRequest(c.Server, queueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnnotationQueuesDeleteQueueItem(ctx context.Context, queueId string, itemId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnnotationQueuesDeleteQueueItemRequest(c.Server, queueId, itemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnnotationQueuesGetQueueItem(ctx context.Context, queueId string, itemId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnnotationQueuesGetQueueItemRequest(c.Server, queueId, itemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnnotationQueuesUpdateQueueItemWithBody(ctx context.Context, queueId string, itemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnnotationQueuesUpdateQueueItemRequestWithBody(c.Server, queueId, itemId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnnotationQueuesUpdateQueueItem(ctx context.Context, queueId string, itemId string, body AnnotationQueuesUpdateQueueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnnotationQueuesUpdateQueueItemRequest(c.Server, queueId, itemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommentsGet(ctx context.Context, params *CommentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommentsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommentsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommentsCreate(ctx context.Context, body CommentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommentsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommentsGetById(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommentsGetByIdRequest(c.Server, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetItemsList(ctx context.Context, params *DatasetItemsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetItemsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetItemsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetItemsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetItemsCreate(ctx context.Context, body DatasetItemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetItemsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetItemsDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetItemsDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetItemsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetItemsGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetRunItemsList(ctx context.Context, params *DatasetRunItemsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetRunItemsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetRunItemsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetRunItemsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetRunItemsCreate(ctx context.Context, body DatasetRunItemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetRunItemsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetsGetRuns(ctx context.Context, datasetName string, params *DatasetsGetRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetsGetRunsRequest(c.Server, datasetName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetsDeleteRun(ctx context.Context, datasetName string, runName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetsDeleteRunRequest(c.Server, datasetName, runName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetsGetRun(ctx context.Context, datasetName string, runName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetsGetRunRequest(c.Server, datasetName, runName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IngestionBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIngestionBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IngestionBatch(ctx context.Context, body IngestionBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIngestionBatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaGetUploadUrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaGetUploadUrlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaGetUploadUrl(ctx context.Context, body MediaGetUploadUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaGetUploadUrlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaGet(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaGetRequest(c.Server, mediaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaPatchWithBody(ctx context.Context, mediaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaPatchRequestWithBody(c.Server, mediaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaPatch(ctx context.Context, mediaId string, body MediaPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaPatchRequest(c.Server, mediaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsMetrics(ctx context.Context, params *MetricsMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelsList(ctx context.Context, params *ModelsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelsCreate(ctx context.Context, body ModelsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelsDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObservationsGetMany(ctx context.Context, params *ObservationsGetManyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObservationsGetManyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ObservationsGet(ctx context.Context, observationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewObservationsGetRequest(c.Server, observationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsGetOrganizationMemberships(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsGetOrganizationMembershipsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsUpdateOrganizationMembershipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsUpdateOrganizationMembershipRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsUpdateOrganizationMembership(ctx context.Context, body OrganizationsUpdateOrganizationMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsUpdateOrganizationMembershipRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsGetOrganizationProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsGetOrganizationProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsCreate(ctx context.Context, body ProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsDelete(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsDeleteRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsUpdateWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsUpdateRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsUpdate(ctx context.Context, projectId string, body ProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsUpdateRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsGetApiKeys(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsGetApiKeysRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsCreateApiKeyWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsCreateApiKeyRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsCreateApiKey(ctx context.Context, projectId string, body ProjectsCreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsCreateApiKeyRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectsDeleteApiKey(ctx context.Context, projectId string, apiKeyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsDeleteApiKeyRequest(c.Server, projectId, apiKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsGetProjectMemberships(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsGetProjectMembershipsRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsUpdateProjectMembershipWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsUpdateProjectMembershipRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsUpdateProjectMembership(ctx context.Context, projectId string, body OrganizationsUpdateProjectMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsUpdateProjectMembershipRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScimGetResourceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScimGetResourceTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScimGetSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScimGetSchemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScimGetServiceProviderConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScimGetServiceProviderConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScimListUsers(ctx context.Context, params *ScimListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScimListUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScimCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScimCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScimCreateUser(ctx context.Context, body ScimCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScimCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScimDeleteUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScimDeleteUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScimGetUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScimGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreConfigsGet(ctx context.Context, params *ScoreConfigsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreConfigsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreConfigsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreConfigsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreConfigsCreate(ctx context.Context, body ScoreConfigsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreConfigsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreConfigsGetById(ctx context.Context, configId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreConfigsGetByIdRequest(c.Server, configId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreCreate(ctx context.Context, body ScoreCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreDelete(ctx context.Context, scoreId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreDeleteRequest(c.Server, scoreId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SessionsList(ctx context.Context, params *SessionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSessionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SessionsGet(ctx context.Context, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSessionsGetRequest(c.Server, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceDeleteMultipleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceDeleteMultiple(ctx context.Context, body TraceDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceDeleteMultipleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceList(ctx context.Context, params *TraceListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceDelete(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceDeleteRequest(c.Server, traceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceGet(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceGetRequest(c.Server, traceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetsList(ctx context.Context, params *DatasetsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetsCreate(ctx context.Context, body DatasetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DatasetsGet(ctx context.Context, datasetName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDatasetsGetRequest(c.Server, datasetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptsList(ctx context.Context, params *PromptsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptsCreate(ctx context.Context, body PromptsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptVersionUpdateWithBody(ctx context.Context, name string, version int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptVersionUpdateRequestWithBody(c.Server, name, version, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptVersionUpdate(ctx context.Context, name string, version int, body PromptVersionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptVersionUpdateRequest(c.Server, name, version, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptsGet(ctx context.Context, promptName string, params *PromptsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptsGetRequest(c.Server, promptName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreV2Get(ctx context.Context, params *ScoreV2GetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreV2GetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreV2GetById(ctx context.Context, scoreId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreV2GetByIdRequest(c.Server, scoreId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAnnotationQueuesListQueuesRequest generates requests for AnnotationQueuesListQueues
func NewAnnotationQueuesListQueuesRequest(server string, params *AnnotationQueuesListQueuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/annotation-queues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAnnotationQueuesGetQueueRequest generates requests for AnnotationQueuesGetQueue
func NewAnnotationQueuesGetQueueRequest(server string, queueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "queueId", runtime.ParamLocationPath, queueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/annotation-queues/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAnnotationQueuesListQueueItemsRequest generates requests for AnnotationQueuesListQueueItems
func NewAnnotationQueuesListQueueItemsRequest(server string, queueId string, params *AnnotationQueuesListQueueItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "queueId", runtime.ParamLocationPath, queueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/annotation-queues/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAnnotationQueuesCreateQueueItemRequest calls the generic AnnotationQueuesCreateQueueItem builder with application/json body
func NewAnnotationQueuesCreateQueueItemRequest(server string, queueId string, body AnnotationQueuesCreateQueueItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAnnotationQueuesCreateQueueItemRequestWithBody(server, queueId, "application/json", bodyReader)
}

// NewAnnotationQueuesCreateQueueItemRequestWithBody generates requests for AnnotationQueuesCreateQueueItem with any type of body
func NewAnnotationQueuesCreateQueueItemRequestWithBody(server string, queueId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "queueId", runtime.ParamLocationPath, queueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/annotation-queues/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAnnotationQueuesDeleteQueueItemRequest generates requests for AnnotationQueuesDeleteQueueItem
func NewAnnotationQueuesDeleteQueueItemRequest(server string, queueId string, itemId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "queueId", runtime.ParamLocationPath, queueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/annotation-queues/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAnnotationQueuesGetQueueItemRequest generates requests for AnnotationQueuesGetQueueItem
func NewAnnotationQueuesGetQueueItemRequest(server string, queueId string, itemId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "queueId", runtime.ParamLocationPath, queueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/annotation-queues/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAnnotationQueuesUpdateQueueItemRequest calls the generic AnnotationQueuesUpdateQueueItem builder with application/json body
func NewAnnotationQueuesUpdateQueueItemRequest(server string, queueId string, itemId string, body AnnotationQueuesUpdateQueueItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAnnotationQueuesUpdateQueueItemRequestWithBody(server, queueId, itemId, "application/json", bodyReader)
}

// NewAnnotationQueuesUpdateQueueItemRequestWithBody generates requests for AnnotationQueuesUpdateQueueItem with any type of body
func NewAnnotationQueuesUpdateQueueItemRequestWithBody(server string, queueId string, itemId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "queueId", runtime.ParamLocationPath, queueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/annotation-queues/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommentsGetRequest generates requests for CommentsGet
func NewCommentsGetRequest(server string, params *CommentsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/comments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObjectType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectType", runtime.ParamLocationQuery, *params.ObjectType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectId", runtime.ParamLocationQuery, *params.ObjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthorUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authorUserId", runtime.ParamLocationQuery, *params.AuthorUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommentsCreateRequest calls the generic CommentsCreate builder with application/json body
func NewCommentsCreateRequest(server string, body CommentsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommentsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCommentsCreateRequestWithBody generates requests for CommentsCreate with any type of body
func NewCommentsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/comments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommentsGetByIdRequest generates requests for CommentsGetById
func NewCommentsGetByIdRequest(server string, commentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commentId", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/comments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatasetItemsListRequest generates requests for DatasetItemsList
func NewDatasetItemsListRequest(server string, params *DatasetItemsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/dataset-items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DatasetName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "datasetName", runtime.ParamLocationQuery, *params.DatasetName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceTraceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceTraceId", runtime.ParamLocationQuery, *params.SourceTraceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceObservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceObservationId", runtime.ParamLocationQuery, *params.SourceObservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatasetItemsCreateRequest calls the generic DatasetItemsCreate builder with application/json body
func NewDatasetItemsCreateRequest(server string, body DatasetItemsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDatasetItemsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDatasetItemsCreateRequestWithBody generates requests for DatasetItemsCreate with any type of body
func NewDatasetItemsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/dataset-items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDatasetItemsDeleteRequest generates requests for DatasetItemsDelete
func NewDatasetItemsDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/dataset-items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatasetItemsGetRequest generates requests for DatasetItemsGet
func NewDatasetItemsGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/dataset-items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatasetRunItemsListRequest generates requests for DatasetRunItemsList
func NewDatasetRunItemsListRequest(server string, params *DatasetRunItemsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/dataset-run-items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "datasetId", runtime.ParamLocationQuery, params.DatasetId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "runName", runtime.ParamLocationQuery, params.RunName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatasetRunItemsCreateRequest calls the generic DatasetRunItemsCreate builder with application/json body
func NewDatasetRunItemsCreateRequest(server string, body DatasetRunItemsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDatasetRunItemsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDatasetRunItemsCreateRequestWithBody generates requests for DatasetRunItemsCreate with any type of body
func NewDatasetRunItemsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/dataset-run-items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDatasetsGetRunsRequest generates requests for DatasetsGetRuns
func NewDatasetsGetRunsRequest(server string, datasetName string, params *DatasetsGetRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "datasetName", runtime.ParamLocationPath, datasetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/datasets/%s/runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatasetsDeleteRunRequest generates requests for DatasetsDeleteRun
func NewDatasetsDeleteRunRequest(server string, datasetName string, runName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "datasetName", runtime.ParamLocationPath, datasetName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "runName", runtime.ParamLocationPath, runName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/datasets/%s/runs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatasetsGetRunRequest generates requests for DatasetsGetRun
func NewDatasetsGetRunRequest(server string, datasetName string, runName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "datasetName", runtime.ParamLocationPath, datasetName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "runName", runtime.ParamLocationPath, runName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/datasets/%s/runs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthHealthRequest generates requests for HealthHealth
func NewHealthHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIngestionBatchRequest calls the generic IngestionBatch builder with application/json body
func NewIngestionBatchRequest(server string, body IngestionBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIngestionBatchRequestWithBody(server, "application/json", bodyReader)
}

// NewIngestionBatchRequestWithBody generates requests for IngestionBatch with any type of body
func NewIngestionBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/ingestion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMediaGetUploadUrlRequest calls the generic MediaGetUploadUrl builder with application/json body
func NewMediaGetUploadUrlRequest(server string, body MediaGetUploadUrlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMediaGetUploadUrlRequestWithBody(server, "application/json", bodyReader)
}

// NewMediaGetUploadUrlRequestWithBody generates requests for MediaGetUploadUrl with any type of body
func NewMediaGetUploadUrlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMediaGetRequest generates requests for MediaGet
func NewMediaGetRequest(server string, mediaId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, mediaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/media/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMediaPatchRequest calls the generic MediaPatch builder with application/json body
func NewMediaPatchRequest(server string, mediaId string, body MediaPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMediaPatchRequestWithBody(server, mediaId, "application/json", bodyReader)
}

// NewMediaPatchRequestWithBody generates requests for MediaPatch with any type of body
func NewMediaPatchRequestWithBody(server string, mediaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, mediaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/media/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetricsMetricsRequest generates requests for MetricsMetrics
func NewMetricsMetricsRequest(server string, params *MetricsMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModelsListRequest generates requests for ModelsList
func NewModelsListRequest(server string, params *ModelsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModelsCreateRequest calls the generic ModelsCreate builder with application/json body
func NewModelsCreateRequest(server string, body ModelsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModelsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewModelsCreateRequestWithBody generates requests for ModelsCreate with any type of body
func NewModelsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModelsDeleteRequest generates requests for ModelsDelete
func NewModelsDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModelsGetRequest generates requests for ModelsGet
func NewModelsGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewObservationsGetManyRequest generates requests for ObservationsGetMany
func NewObservationsGetManyRequest(server string, params *ObservationsGetManyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/observations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TraceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "traceId", runtime.ParamLocationQuery, *params.TraceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Level != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentObservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentObservationId", runtime.ParamLocationQuery, *params.ParentObservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromStartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromStartTime", runtime.ParamLocationQuery, *params.FromStartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToStartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toStartTime", runtime.ParamLocationQuery, *params.ToStartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewObservationsGetRequest generates requests for ObservationsGet
func NewObservationsGetRequest(server string, observationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "observationId", runtime.ParamLocationPath, observationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationsGetOrganizationMembershipsRequest generates requests for OrganizationsGetOrganizationMemberships
func NewOrganizationsGetOrganizationMembershipsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/organizations/memberships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationsUpdateOrganizationMembershipRequest calls the generic OrganizationsUpdateOrganizationMembership builder with application/json body
func NewOrganizationsUpdateOrganizationMembershipRequest(server string, body OrganizationsUpdateOrganizationMembershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationsUpdateOrganizationMembershipRequestWithBody(server, "application/json", bodyReader)
}

// NewOrganizationsUpdateOrganizationMembershipRequestWithBody generates requests for OrganizationsUpdateOrganizationMembership with any type of body
func NewOrganizationsUpdateOrganizationMembershipRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/organizations/memberships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationsGetOrganizationProjectsRequest generates requests for OrganizationsGetOrganizationProjects
func NewOrganizationsGetOrganizationProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/organizations/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProjectsGetRequest generates requests for ProjectsGet
func NewProjectsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProjectsCreateRequest calls the generic ProjectsCreate builder with application/json body
func NewProjectsCreateRequest(server string, body ProjectsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProjectsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProjectsCreateRequestWithBody generates requests for ProjectsCreate with any type of body
func NewProjectsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProjectsDeleteRequest generates requests for ProjectsDelete
func NewProjectsDeleteRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProjectsUpdateRequest calls the generic ProjectsUpdate builder with application/json body
func NewProjectsUpdateRequest(server string, projectId string, body ProjectsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProjectsUpdateRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewProjectsUpdateRequestWithBody generates requests for ProjectsUpdate with any type of body
func NewProjectsUpdateRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProjectsGetApiKeysRequest generates requests for ProjectsGetApiKeys
func NewProjectsGetApiKeysRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/projects/%s/apiKeys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProjectsCreateApiKeyRequest calls the generic ProjectsCreateApiKey builder with application/json body
func NewProjectsCreateApiKeyRequest(server string, projectId string, body ProjectsCreateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProjectsCreateApiKeyRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewProjectsCreateApiKeyRequestWithBody generates requests for ProjectsCreateApiKey with any type of body
func NewProjectsCreateApiKeyRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/projects/%s/apiKeys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProjectsDeleteApiKeyRequest generates requests for ProjectsDeleteApiKey
func NewProjectsDeleteApiKeyRequest(server string, projectId string, apiKeyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiKeyId", runtime.ParamLocationPath, apiKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/projects/%s/apiKeys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationsGetProjectMembershipsRequest generates requests for OrganizationsGetProjectMemberships
func NewOrganizationsGetProjectMembershipsRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/projects/%s/memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationsUpdateProjectMembershipRequest calls the generic OrganizationsUpdateProjectMembership builder with application/json body
func NewOrganizationsUpdateProjectMembershipRequest(server string, projectId string, body OrganizationsUpdateProjectMembershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationsUpdateProjectMembershipRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewOrganizationsUpdateProjectMembershipRequestWithBody generates requests for OrganizationsUpdateProjectMembership with any type of body
func NewOrganizationsUpdateProjectMembershipRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/projects/%s/memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScimGetResourceTypesRequest generates requests for ScimGetResourceTypes
func NewScimGetResourceTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/scim/ResourceTypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScimGetSchemasRequest generates requests for ScimGetSchemas
func NewScimGetSchemasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/scim/Schemas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScimGetServiceProviderConfigRequest generates requests for ScimGetServiceProviderConfig
func NewScimGetServiceProviderConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/scim/ServiceProviderConfig")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScimListUsersRequest generates requests for ScimListUsers
func NewScimListUsersRequest(server string, params *ScimListUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/scim/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startIndex", runtime.ParamLocationQuery, *params.StartIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScimCreateUserRequest calls the generic ScimCreateUser builder with application/json body
func NewScimCreateUserRequest(server string, body ScimCreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScimCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewScimCreateUserRequestWithBody generates requests for ScimCreateUser with any type of body
func NewScimCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/scim/Users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScimDeleteUserRequest generates requests for ScimDeleteUser
func NewScimDeleteUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScimGetUserRequest generates requests for ScimGetUser
func NewScimGetUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/scim/Users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScoreConfigsGetRequest generates requests for ScoreConfigsGet
func NewScoreConfigsGetRequest(server string, params *ScoreConfigsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/score-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScoreConfigsCreateRequest calls the generic ScoreConfigsCreate builder with application/json body
func NewScoreConfigsCreateRequest(server string, body ScoreConfigsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScoreConfigsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewScoreConfigsCreateRequestWithBody generates requests for ScoreConfigsCreate with any type of body
func NewScoreConfigsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/score-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScoreConfigsGetByIdRequest generates requests for ScoreConfigsGetById
func NewScoreConfigsGetByIdRequest(server string, configId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configId", runtime.ParamLocationPath, configId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/score-configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScoreCreateRequest calls the generic ScoreCreate builder with application/json body
func NewScoreCreateRequest(server string, body ScoreCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScoreCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewScoreCreateRequestWithBody generates requests for ScoreCreate with any type of body
func NewScoreCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/scores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScoreDeleteRequest generates requests for ScoreDelete
func NewScoreDeleteRequest(server string, scoreId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scoreId", runtime.ParamLocationPath, scoreId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/scores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSessionsListRequest generates requests for SessionsList
func NewSessionsListRequest(server string, params *SessionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromTimestamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTimestamp", runtime.ParamLocationQuery, *params.FromTimestamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTimestamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTimestamp", runtime.ParamLocationQuery, *params.ToTimestamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSessionsGetRequest generates requests for SessionsGet
func NewSessionsGetRequest(server string, sessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceDeleteMultipleRequest calls the generic TraceDeleteMultiple builder with application/json body
func NewTraceDeleteMultipleRequest(server string, body TraceDeleteMultipleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTraceDeleteMultipleRequestWithBody(server, "application/json", bodyReader)
}

// NewTraceDeleteMultipleRequestWithBody generates requests for TraceDeleteMultiple with any type of body
func NewTraceDeleteMultipleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTraceListRequest generates requests for TraceList
func NewTraceListRequest(server string, params *TraceListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SessionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionId", runtime.ParamLocationQuery, *params.SessionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromTimestamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTimestamp", runtime.ParamLocationQuery, *params.FromTimestamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTimestamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTimestamp", runtime.ParamLocationQuery, *params.ToTimestamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Release != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "release", runtime.ParamLocationQuery, *params.Release); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceDeleteRequest generates requests for TraceDelete
func NewTraceDeleteRequest(server string, traceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "traceId", runtime.ParamLocationPath, traceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/traces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceGetRequest generates requests for TraceGet
func NewTraceGetRequest(server string, traceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "traceId", runtime.ParamLocationPath, traceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/traces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatasetsListRequest generates requests for DatasetsList
func NewDatasetsListRequest(server string, params *DatasetsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/v2/datasets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDatasetsCreateRequest calls the generic DatasetsCreate builder with application/json body
func NewDatasetsCreateRequest(server string, body DatasetsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDatasetsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDatasetsCreateRequestWithBody generates requests for DatasetsCreate with any type of body
func NewDatasetsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/v2/datasets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDatasetsGetRequest generates requests for DatasetsGet
func NewDatasetsGetRequest(server string, datasetName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "datasetName", runtime.ParamLocationPath, datasetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/v2/datasets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPromptsListRequest generates requests for PromptsList
func NewPromptsListRequest(server string, params *PromptsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/v2/prompts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromUpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromUpdatedAt", runtime.ParamLocationQuery, *params.FromUpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToUpdatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toUpdatedAt", runtime.ParamLocationQuery, *params.ToUpdatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPromptsCreateRequest calls the generic PromptsCreate builder with application/json body
func NewPromptsCreateRequest(server string, body PromptsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPromptsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPromptsCreateRequestWithBody generates requests for PromptsCreate with any type of body
func NewPromptsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/v2/prompts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPromptVersionUpdateRequest calls the generic PromptVersionUpdate builder with application/json body
func NewPromptVersionUpdateRequest(server string, name string, version int, body PromptVersionUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPromptVersionUpdateRequestWithBody(server, name, version, "application/json", bodyReader)
}

// NewPromptVersionUpdateRequestWithBody generates requests for PromptVersionUpdate with any type of body
func NewPromptVersionUpdateRequestWithBody(server string, name string, version int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/v2/prompts/%s/versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPromptsGetRequest generates requests for PromptsGet
func NewPromptsGetRequest(server string, promptName string, params *PromptsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "promptName", runtime.ParamLocationPath, promptName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/v2/prompts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScoreV2GetRequest generates requests for ScoreV2Get
func NewScoreV2GetRequest(server string, params *ScoreV2GetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/v2/scores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FromTimestamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTimestamp", runtime.ParamLocationQuery, *params.FromTimestamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToTimestamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTimestamp", runtime.ParamLocationQuery, *params.ToTimestamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Operator != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "operator", runtime.ParamLocationQuery, *params.Operator); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScoreIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scoreIds", runtime.ParamLocationQuery, *params.ScoreIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ConfigId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configId", runtime.ParamLocationQuery, *params.ConfigId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QueueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queueId", runtime.ParamLocationQuery, *params.QueueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DataType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataType", runtime.ParamLocationQuery, *params.DataType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TraceTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "traceTags", runtime.ParamLocationQuery, *params.TraceTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScoreV2GetByIdRequest generates requests for ScoreV2GetById
func NewScoreV2GetByIdRequest(server string, scoreId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scoreId", runtime.ParamLocationPath, scoreId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/v2/scores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AnnotationQueuesListQueuesWithResponse request
	AnnotationQueuesListQueuesWithResponse(ctx context.Context, params *AnnotationQueuesListQueuesParams, reqEditors ...RequestEditorFn) (*AnnotationQueuesListQueuesResponse, error)

	// AnnotationQueuesGetQueueWithResponse request
	AnnotationQueuesGetQueueWithResponse(ctx context.Context, queueId string, reqEditors ...RequestEditorFn) (*AnnotationQueuesGetQueueResponse, error)

	// AnnotationQueuesListQueueItemsWithResponse request
	AnnotationQueuesListQueueItemsWithResponse(ctx context.Context, queueId string, params *AnnotationQueuesListQueueItemsParams, reqEditors ...RequestEditorFn) (*AnnotationQueuesListQueueItemsResponse, error)

	// AnnotationQueuesCreateQueueItemWithBodyWithResponse request with any body
	AnnotationQueuesCreateQueueItemWithBodyWithResponse(ctx context.Context, queueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnnotationQueuesCreateQueueItemResponse, error)

	AnnotationQueuesCreateQueueItemWithResponse(ctx context.Context, queueId string, body AnnotationQueuesCreateQueueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*AnnotationQueuesCreateQueueItemResponse, error)

	// AnnotationQueuesDeleteQueueItemWithResponse request
	AnnotationQueuesDeleteQueueItemWithResponse(ctx context.Context, queueId string, itemId string, reqEditors ...RequestEditorFn) (*AnnotationQueuesDeleteQueueItemResponse, error)

	// AnnotationQueuesGetQueueItemWithResponse request
	AnnotationQueuesGetQueueItemWithResponse(ctx context.Context, queueId string, itemId string, reqEditors ...RequestEditorFn) (*AnnotationQueuesGetQueueItemResponse, error)

	// AnnotationQueuesUpdateQueueItemWithBodyWithResponse request with any body
	AnnotationQueuesUpdateQueueItemWithBodyWithResponse(ctx context.Context, queueId string, itemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnnotationQueuesUpdateQueueItemResponse, error)

	AnnotationQueuesUpdateQueueItemWithResponse(ctx context.Context, queueId string, itemId string, body AnnotationQueuesUpdateQueueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*AnnotationQueuesUpdateQueueItemResponse, error)

	// CommentsGetWithResponse request
	CommentsGetWithResponse(ctx context.Context, params *CommentsGetParams, reqEditors ...RequestEditorFn) (*CommentsGetResponse, error)

	// CommentsCreateWithBodyWithResponse request with any body
	CommentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommentsCreateResponse, error)

	CommentsCreateWithResponse(ctx context.Context, body CommentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommentsCreateResponse, error)

	// CommentsGetByIdWithResponse request
	CommentsGetByIdWithResponse(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*CommentsGetByIdResponse, error)

	// DatasetItemsListWithResponse request
	DatasetItemsListWithResponse(ctx context.Context, params *DatasetItemsListParams, reqEditors ...RequestEditorFn) (*DatasetItemsListResponse, error)

	// DatasetItemsCreateWithBodyWithResponse request with any body
	DatasetItemsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DatasetItemsCreateResponse, error)

	DatasetItemsCreateWithResponse(ctx context.Context, body DatasetItemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DatasetItemsCreateResponse, error)

	// DatasetItemsDeleteWithResponse request
	DatasetItemsDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DatasetItemsDeleteResponse, error)

	// DatasetItemsGetWithResponse request
	DatasetItemsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DatasetItemsGetResponse, error)

	// DatasetRunItemsListWithResponse request
	DatasetRunItemsListWithResponse(ctx context.Context, params *DatasetRunItemsListParams, reqEditors ...RequestEditorFn) (*DatasetRunItemsListResponse, error)

	// DatasetRunItemsCreateWithBodyWithResponse request with any body
	DatasetRunItemsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DatasetRunItemsCreateResponse, error)

	DatasetRunItemsCreateWithResponse(ctx context.Context, body DatasetRunItemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DatasetRunItemsCreateResponse, error)

	// DatasetsGetRunsWithResponse request
	DatasetsGetRunsWithResponse(ctx context.Context, datasetName string, params *DatasetsGetRunsParams, reqEditors ...RequestEditorFn) (*DatasetsGetRunsResponse, error)

	// DatasetsDeleteRunWithResponse request
	DatasetsDeleteRunWithResponse(ctx context.Context, datasetName string, runName string, reqEditors ...RequestEditorFn) (*DatasetsDeleteRunResponse, error)

	// DatasetsGetRunWithResponse request
	DatasetsGetRunWithResponse(ctx context.Context, datasetName string, runName string, reqEditors ...RequestEditorFn) (*DatasetsGetRunResponse, error)

	// HealthHealthWithResponse request
	HealthHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthHealthResponse, error)

	// IngestionBatchWithBodyWithResponse request with any body
	IngestionBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IngestionBatchResponse, error)

	IngestionBatchWithResponse(ctx context.Context, body IngestionBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*IngestionBatchResponse, error)

	// MediaGetUploadUrlWithBodyWithResponse request with any body
	MediaGetUploadUrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MediaGetUploadUrlResponse, error)

	MediaGetUploadUrlWithResponse(ctx context.Context, body MediaGetUploadUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*MediaGetUploadUrlResponse, error)

	// MediaGetWithResponse request
	MediaGetWithResponse(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*MediaGetResponse, error)

	// MediaPatchWithBodyWithResponse request with any body
	MediaPatchWithBodyWithResponse(ctx context.Context, mediaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MediaPatchResponse, error)

	MediaPatchWithResponse(ctx context.Context, mediaId string, body MediaPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*MediaPatchResponse, error)

	// MetricsMetricsWithResponse request
	MetricsMetricsWithResponse(ctx context.Context, params *MetricsMetricsParams, reqEditors ...RequestEditorFn) (*MetricsMetricsResponse, error)

	// ModelsListWithResponse request
	ModelsListWithResponse(ctx context.Context, params *ModelsListParams, reqEditors ...RequestEditorFn) (*ModelsListResponse, error)

	// ModelsCreateWithBodyWithResponse request with any body
	ModelsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModelsCreateResponse, error)

	ModelsCreateWithResponse(ctx context.Context, body ModelsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModelsCreateResponse, error)

	// ModelsDeleteWithResponse request
	ModelsDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ModelsDeleteResponse, error)

	// ModelsGetWithResponse request
	ModelsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ModelsGetResponse, error)

	// ObservationsGetManyWithResponse request
	ObservationsGetManyWithResponse(ctx context.Context, params *ObservationsGetManyParams, reqEditors ...RequestEditorFn) (*ObservationsGetManyResponse, error)

	// ObservationsGetWithResponse request
	ObservationsGetWithResponse(ctx context.Context, observationId string, reqEditors ...RequestEditorFn) (*ObservationsGetResponse, error)

	// OrganizationsGetOrganizationMembershipsWithResponse request
	OrganizationsGetOrganizationMembershipsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganizationsGetOrganizationMembershipsResponse, error)

	// OrganizationsUpdateOrganizationMembershipWithBodyWithResponse request with any body
	OrganizationsUpdateOrganizationMembershipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationsUpdateOrganizationMembershipResponse, error)

	OrganizationsUpdateOrganizationMembershipWithResponse(ctx context.Context, body OrganizationsUpdateOrganizationMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationsUpdateOrganizationMembershipResponse, error)

	// OrganizationsGetOrganizationProjectsWithResponse request
	OrganizationsGetOrganizationProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganizationsGetOrganizationProjectsResponse, error)

	// ProjectsGetWithResponse request
	ProjectsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProjectsGetResponse, error)

	// ProjectsCreateWithBodyWithResponse request with any body
	ProjectsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectsCreateResponse, error)

	ProjectsCreateWithResponse(ctx context.Context, body ProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectsCreateResponse, error)

	// ProjectsDeleteWithResponse request
	ProjectsDeleteWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ProjectsDeleteResponse, error)

	// ProjectsUpdateWithBodyWithResponse request with any body
	ProjectsUpdateWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectsUpdateResponse, error)

	ProjectsUpdateWithResponse(ctx context.Context, projectId string, body ProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectsUpdateResponse, error)

	// ProjectsGetApiKeysWithResponse request
	ProjectsGetApiKeysWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ProjectsGetApiKeysResponse, error)

	// ProjectsCreateApiKeyWithBodyWithResponse request with any body
	ProjectsCreateApiKeyWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectsCreateApiKeyResponse, error)

	ProjectsCreateApiKeyWithResponse(ctx context.Context, projectId string, body ProjectsCreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectsCreateApiKeyResponse, error)

	// ProjectsDeleteApiKeyWithResponse request
	ProjectsDeleteApiKeyWithResponse(ctx context.Context, projectId string, apiKeyId string, reqEditors ...RequestEditorFn) (*ProjectsDeleteApiKeyResponse, error)

	// OrganizationsGetProjectMembershipsWithResponse request
	OrganizationsGetProjectMembershipsWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*OrganizationsGetProjectMembershipsResponse, error)

	// OrganizationsUpdateProjectMembershipWithBodyWithResponse request with any body
	OrganizationsUpdateProjectMembershipWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationsUpdateProjectMembershipResponse, error)

	OrganizationsUpdateProjectMembershipWithResponse(ctx context.Context, projectId string, body OrganizationsUpdateProjectMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationsUpdateProjectMembershipResponse, error)

	// ScimGetResourceTypesWithResponse request
	ScimGetResourceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScimGetResourceTypesResponse, error)

	// ScimGetSchemasWithResponse request
	ScimGetSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScimGetSchemasResponse, error)

	// ScimGetServiceProviderConfigWithResponse request
	ScimGetServiceProviderConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScimGetServiceProviderConfigResponse, error)

	// ScimListUsersWithResponse request
	ScimListUsersWithResponse(ctx context.Context, params *ScimListUsersParams, reqEditors ...RequestEditorFn) (*ScimListUsersResponse, error)

	// ScimCreateUserWithBodyWithResponse request with any body
	ScimCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScimCreateUserResponse, error)

	ScimCreateUserWithResponse(ctx context.Context, body ScimCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ScimCreateUserResponse, error)

	// ScimDeleteUserWithResponse request
	ScimDeleteUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*ScimDeleteUserResponse, error)

	// ScimGetUserWithResponse request
	ScimGetUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*ScimGetUserResponse, error)

	// ScoreConfigsGetWithResponse request
	ScoreConfigsGetWithResponse(ctx context.Context, params *ScoreConfigsGetParams, reqEditors ...RequestEditorFn) (*ScoreConfigsGetResponse, error)

	// ScoreConfigsCreateWithBodyWithResponse request with any body
	ScoreConfigsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScoreConfigsCreateResponse, error)

	ScoreConfigsCreateWithResponse(ctx context.Context, body ScoreConfigsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ScoreConfigsCreateResponse, error)

	// ScoreConfigsGetByIdWithResponse request
	ScoreConfigsGetByIdWithResponse(ctx context.Context, configId string, reqEditors ...RequestEditorFn) (*ScoreConfigsGetByIdResponse, error)

	// ScoreCreateWithBodyWithResponse request with any body
	ScoreCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScoreCreateResponse, error)

	ScoreCreateWithResponse(ctx context.Context, body ScoreCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ScoreCreateResponse, error)

	// ScoreDeleteWithResponse request
	ScoreDeleteWithResponse(ctx context.Context, scoreId string, reqEditors ...RequestEditorFn) (*ScoreDeleteResponse, error)

	// SessionsListWithResponse request
	SessionsListWithResponse(ctx context.Context, params *SessionsListParams, reqEditors ...RequestEditorFn) (*SessionsListResponse, error)

	// SessionsGetWithResponse request
	SessionsGetWithResponse(ctx context.Context, sessionId string, reqEditors ...RequestEditorFn) (*SessionsGetResponse, error)

	// TraceDeleteMultipleWithBodyWithResponse request with any body
	TraceDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TraceDeleteMultipleResponse, error)

	TraceDeleteMultipleWithResponse(ctx context.Context, body TraceDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*TraceDeleteMultipleResponse, error)

	// TraceListWithResponse request
	TraceListWithResponse(ctx context.Context, params *TraceListParams, reqEditors ...RequestEditorFn) (*TraceListResponse, error)

	// TraceDeleteWithResponse request
	TraceDeleteWithResponse(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*TraceDeleteResponse, error)

	// TraceGetWithResponse request
	TraceGetWithResponse(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*TraceGetResponse, error)

	// DatasetsListWithResponse request
	DatasetsListWithResponse(ctx context.Context, params *DatasetsListParams, reqEditors ...RequestEditorFn) (*DatasetsListResponse, error)

	// DatasetsCreateWithBodyWithResponse request with any body
	DatasetsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DatasetsCreateResponse, error)

	DatasetsCreateWithResponse(ctx context.Context, body DatasetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DatasetsCreateResponse, error)

	// DatasetsGetWithResponse request
	DatasetsGetWithResponse(ctx context.Context, datasetName string, reqEditors ...RequestEditorFn) (*DatasetsGetResponse, error)

	// PromptsListWithResponse request
	PromptsListWithResponse(ctx context.Context, params *PromptsListParams, reqEditors ...RequestEditorFn) (*PromptsListResponse, error)

	// PromptsCreateWithBodyWithResponse request with any body
	PromptsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PromptsCreateResponse, error)

	PromptsCreateWithResponse(ctx context.Context, body PromptsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PromptsCreateResponse, error)

	// PromptVersionUpdateWithBodyWithResponse request with any body
	PromptVersionUpdateWithBodyWithResponse(ctx context.Context, name string, version int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PromptVersionUpdateResponse, error)

	PromptVersionUpdateWithResponse(ctx context.Context, name string, version int, body PromptVersionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PromptVersionUpdateResponse, error)

	// PromptsGetWithResponse request
	PromptsGetWithResponse(ctx context.Context, promptName string, params *PromptsGetParams, reqEditors ...RequestEditorFn) (*PromptsGetResponse, error)

	// ScoreV2GetWithResponse request
	ScoreV2GetWithResponse(ctx context.Context, params *ScoreV2GetParams, reqEditors ...RequestEditorFn) (*ScoreV2GetResponse, error)

	// ScoreV2GetByIdWithResponse request
	ScoreV2GetByIdWithResponse(ctx context.Context, scoreId string, reqEditors ...RequestEditorFn) (*ScoreV2GetByIdResponse, error)
}

type AnnotationQueuesListQueuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAnnotationQueues
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r AnnotationQueuesListQueuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnnotationQueuesListQueuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AnnotationQueuesGetQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnnotationQueue
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r AnnotationQueuesGetQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnnotationQueuesGetQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AnnotationQueuesListQueueItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAnnotationQueueItems
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r AnnotationQueuesListQueueItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnnotationQueuesListQueueItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AnnotationQueuesCreateQueueItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnnotationQueueItem
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r AnnotationQueuesCreateQueueItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnnotationQueuesCreateQueueItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AnnotationQueuesDeleteQueueItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteAnnotationQueueItemResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r AnnotationQueuesDeleteQueueItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnnotationQueuesDeleteQueueItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AnnotationQueuesGetQueueItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnnotationQueueItem
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r AnnotationQueuesGetQueueItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnnotationQueuesGetQueueItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AnnotationQueuesUpdateQueueItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnnotationQueueItem
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r AnnotationQueuesUpdateQueueItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnnotationQueuesUpdateQueueItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommentsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCommentsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommentsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommentsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommentsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCommentResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommentsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommentsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommentsGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Comment
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommentsGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommentsGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetItemsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDatasetItems
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetItemsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetItemsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetItemsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatasetItem
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetItemsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetItemsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetItemsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteDatasetItemResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetItemsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetItemsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatasetItem
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetRunItemsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDatasetRunItems
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetRunItemsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetRunItemsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetRunItemsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatasetRunItem
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetRunItemsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetRunItemsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetsGetRunsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDatasetRuns
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetsGetRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetsGetRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetsDeleteRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteDatasetRunResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetsDeleteRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetsDeleteRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetsGetRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatasetRunWithItems
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetsGetRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetsGetRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r HealthHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IngestionBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *IngestionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r IngestionBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IngestionBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaGetUploadUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMediaUploadUrlResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r MediaGetUploadUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaGetUploadUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMediaResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r MediaGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r MediaPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetricsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r MetricsMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedModels
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ModelsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ModelsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ModelsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ModelsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObservationsGetManyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObservationsViews
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ObservationsGetManyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObservationsGetManyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ObservationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObservationsView
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ObservationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ObservationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationsGetOrganizationMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r OrganizationsGetOrganizationMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationsGetOrganizationMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationsUpdateOrganizationMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r OrganizationsUpdateOrganizationMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationsUpdateOrganizationMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationsGetOrganizationProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationProjectsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r OrganizationsGetOrganizationProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationsGetOrganizationProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Projects
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ProjectsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ProjectsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ProjectDeletionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ProjectsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ProjectsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectsGetApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeyList
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ProjectsGetApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectsGetApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectsCreateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ProjectsCreateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectsCreateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectsDeleteApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeyDeletionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ProjectsDeleteApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectsDeleteApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationsGetProjectMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r OrganizationsGetProjectMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationsGetProjectMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationsUpdateProjectMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r OrganizationsUpdateProjectMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationsUpdateProjectMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScimGetResourceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceTypesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScimGetResourceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScimGetResourceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScimGetSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchemasResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScimGetSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScimGetSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScimGetServiceProviderConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceProviderConfig
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScimGetServiceProviderConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScimGetServiceProviderConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScimListUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScimUsersListResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScimListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScimListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScimCreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScimUser
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScimCreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScimCreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScimDeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScimDeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScimDeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScimGetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScimUser
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScimGetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScimGetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScoreConfigsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScoreConfigs
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScoreConfigsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScoreConfigsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScoreConfigsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScoreConfig
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScoreConfigsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScoreConfigsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScoreConfigsGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScoreConfig
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScoreConfigsGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScoreConfigsGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScoreCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateScoreResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScoreCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScoreCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScoreDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScoreDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScoreDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SessionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSessions
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r SessionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SessionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SessionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionWithTraces
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r SessionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SessionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceDeleteMultipleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteTraceResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r TraceDeleteMultipleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceDeleteMultipleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Traces
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r TraceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteTraceResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r TraceDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TraceWithFullDetails
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r TraceGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDatasets
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dataset
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DatasetsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dataset
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r DatasetsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatasetsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PromptsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PromptMetaListResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r PromptsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PromptsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PromptsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Prompt
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r PromptsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PromptsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PromptVersionUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Prompt
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r PromptVersionUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PromptVersionUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PromptsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Prompt
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r PromptsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PromptsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScoreV2GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetScoresResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScoreV2GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScoreV2GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScoreV2GetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Score
	JSON400      *interface{}
	JSON401      *interface{}
	JSON403      *interface{}
	JSON404      *interface{}
	JSON405      *interface{}
}

// Status returns HTTPResponse.Status
func (r ScoreV2GetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScoreV2GetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AnnotationQueuesListQueuesWithResponse request returning *AnnotationQueuesListQueuesResponse
func (c *ClientWithResponses) AnnotationQueuesListQueuesWithResponse(ctx context.Context, params *AnnotationQueuesListQueuesParams, reqEditors ...RequestEditorFn) (*AnnotationQueuesListQueuesResponse, error) {
	rsp, err := c.AnnotationQueuesListQueues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnnotationQueuesListQueuesResponse(rsp)
}

// AnnotationQueuesGetQueueWithResponse request returning *AnnotationQueuesGetQueueResponse
func (c *ClientWithResponses) AnnotationQueuesGetQueueWithResponse(ctx context.Context, queueId string, reqEditors ...RequestEditorFn) (*AnnotationQueuesGetQueueResponse, error) {
	rsp, err := c.AnnotationQueuesGetQueue(ctx, queueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnnotationQueuesGetQueueResponse(rsp)
}

// AnnotationQueuesListQueueItemsWithResponse request returning *AnnotationQueuesListQueueItemsResponse
func (c *ClientWithResponses) AnnotationQueuesListQueueItemsWithResponse(ctx context.Context, queueId string, params *AnnotationQueuesListQueueItemsParams, reqEditors ...RequestEditorFn) (*AnnotationQueuesListQueueItemsResponse, error) {
	rsp, err := c.AnnotationQueuesListQueueItems(ctx, queueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnnotationQueuesListQueueItemsResponse(rsp)
}

// AnnotationQueuesCreateQueueItemWithBodyWithResponse request with arbitrary body returning *AnnotationQueuesCreateQueueItemResponse
func (c *ClientWithResponses) AnnotationQueuesCreateQueueItemWithBodyWithResponse(ctx context.Context, queueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnnotationQueuesCreateQueueItemResponse, error) {
	rsp, err := c.AnnotationQueuesCreateQueueItemWithBody(ctx, queueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnnotationQueuesCreateQueueItemResponse(rsp)
}

func (c *ClientWithResponses) AnnotationQueuesCreateQueueItemWithResponse(ctx context.Context, queueId string, body AnnotationQueuesCreateQueueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*AnnotationQueuesCreateQueueItemResponse, error) {
	rsp, err := c.AnnotationQueuesCreateQueueItem(ctx, queueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnnotationQueuesCreateQueueItemResponse(rsp)
}

// AnnotationQueuesDeleteQueueItemWithResponse request returning *AnnotationQueuesDeleteQueueItemResponse
func (c *ClientWithResponses) AnnotationQueuesDeleteQueueItemWithResponse(ctx context.Context, queueId string, itemId string, reqEditors ...RequestEditorFn) (*AnnotationQueuesDeleteQueueItemResponse, error) {
	rsp, err := c.AnnotationQueuesDeleteQueueItem(ctx, queueId, itemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnnotationQueuesDeleteQueueItemResponse(rsp)
}

// AnnotationQueuesGetQueueItemWithResponse request returning *AnnotationQueuesGetQueueItemResponse
func (c *ClientWithResponses) AnnotationQueuesGetQueueItemWithResponse(ctx context.Context, queueId string, itemId string, reqEditors ...RequestEditorFn) (*AnnotationQueuesGetQueueItemResponse, error) {
	rsp, err := c.AnnotationQueuesGetQueueItem(ctx, queueId, itemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnnotationQueuesGetQueueItemResponse(rsp)
}

// AnnotationQueuesUpdateQueueItemWithBodyWithResponse request with arbitrary body returning *AnnotationQueuesUpdateQueueItemResponse
func (c *ClientWithResponses) AnnotationQueuesUpdateQueueItemWithBodyWithResponse(ctx context.Context, queueId string, itemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnnotationQueuesUpdateQueueItemResponse, error) {
	rsp, err := c.AnnotationQueuesUpdateQueueItemWithBody(ctx, queueId, itemId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnnotationQueuesUpdateQueueItemResponse(rsp)
}

func (c *ClientWithResponses) AnnotationQueuesUpdateQueueItemWithResponse(ctx context.Context, queueId string, itemId string, body AnnotationQueuesUpdateQueueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*AnnotationQueuesUpdateQueueItemResponse, error) {
	rsp, err := c.AnnotationQueuesUpdateQueueItem(ctx, queueId, itemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnnotationQueuesUpdateQueueItemResponse(rsp)
}

// CommentsGetWithResponse request returning *CommentsGetResponse
func (c *ClientWithResponses) CommentsGetWithResponse(ctx context.Context, params *CommentsGetParams, reqEditors ...RequestEditorFn) (*CommentsGetResponse, error) {
	rsp, err := c.CommentsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommentsGetResponse(rsp)
}

// CommentsCreateWithBodyWithResponse request with arbitrary body returning *CommentsCreateResponse
func (c *ClientWithResponses) CommentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommentsCreateResponse, error) {
	rsp, err := c.CommentsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommentsCreateResponse(rsp)
}

func (c *ClientWithResponses) CommentsCreateWithResponse(ctx context.Context, body CommentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommentsCreateResponse, error) {
	rsp, err := c.CommentsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommentsCreateResponse(rsp)
}

// CommentsGetByIdWithResponse request returning *CommentsGetByIdResponse
func (c *ClientWithResponses) CommentsGetByIdWithResponse(ctx context.Context, commentId string, reqEditors ...RequestEditorFn) (*CommentsGetByIdResponse, error) {
	rsp, err := c.CommentsGetById(ctx, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommentsGetByIdResponse(rsp)
}

// DatasetItemsListWithResponse request returning *DatasetItemsListResponse
func (c *ClientWithResponses) DatasetItemsListWithResponse(ctx context.Context, params *DatasetItemsListParams, reqEditors ...RequestEditorFn) (*DatasetItemsListResponse, error) {
	rsp, err := c.DatasetItemsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetItemsListResponse(rsp)
}

// DatasetItemsCreateWithBodyWithResponse request with arbitrary body returning *DatasetItemsCreateResponse
func (c *ClientWithResponses) DatasetItemsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DatasetItemsCreateResponse, error) {
	rsp, err := c.DatasetItemsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetItemsCreateResponse(rsp)
}

func (c *ClientWithResponses) DatasetItemsCreateWithResponse(ctx context.Context, body DatasetItemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DatasetItemsCreateResponse, error) {
	rsp, err := c.DatasetItemsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetItemsCreateResponse(rsp)
}

// DatasetItemsDeleteWithResponse request returning *DatasetItemsDeleteResponse
func (c *ClientWithResponses) DatasetItemsDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DatasetItemsDeleteResponse, error) {
	rsp, err := c.DatasetItemsDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetItemsDeleteResponse(rsp)
}

// DatasetItemsGetWithResponse request returning *DatasetItemsGetResponse
func (c *ClientWithResponses) DatasetItemsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DatasetItemsGetResponse, error) {
	rsp, err := c.DatasetItemsGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetItemsGetResponse(rsp)
}

// DatasetRunItemsListWithResponse request returning *DatasetRunItemsListResponse
func (c *ClientWithResponses) DatasetRunItemsListWithResponse(ctx context.Context, params *DatasetRunItemsListParams, reqEditors ...RequestEditorFn) (*DatasetRunItemsListResponse, error) {
	rsp, err := c.DatasetRunItemsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetRunItemsListResponse(rsp)
}

// DatasetRunItemsCreateWithBodyWithResponse request with arbitrary body returning *DatasetRunItemsCreateResponse
func (c *ClientWithResponses) DatasetRunItemsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DatasetRunItemsCreateResponse, error) {
	rsp, err := c.DatasetRunItemsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetRunItemsCreateResponse(rsp)
}

func (c *ClientWithResponses) DatasetRunItemsCreateWithResponse(ctx context.Context, body DatasetRunItemsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DatasetRunItemsCreateResponse, error) {
	rsp, err := c.DatasetRunItemsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetRunItemsCreateResponse(rsp)
}

// DatasetsGetRunsWithResponse request returning *DatasetsGetRunsResponse
func (c *ClientWithResponses) DatasetsGetRunsWithResponse(ctx context.Context, datasetName string, params *DatasetsGetRunsParams, reqEditors ...RequestEditorFn) (*DatasetsGetRunsResponse, error) {
	rsp, err := c.DatasetsGetRuns(ctx, datasetName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetsGetRunsResponse(rsp)
}

// DatasetsDeleteRunWithResponse request returning *DatasetsDeleteRunResponse
func (c *ClientWithResponses) DatasetsDeleteRunWithResponse(ctx context.Context, datasetName string, runName string, reqEditors ...RequestEditorFn) (*DatasetsDeleteRunResponse, error) {
	rsp, err := c.DatasetsDeleteRun(ctx, datasetName, runName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetsDeleteRunResponse(rsp)
}

// DatasetsGetRunWithResponse request returning *DatasetsGetRunResponse
func (c *ClientWithResponses) DatasetsGetRunWithResponse(ctx context.Context, datasetName string, runName string, reqEditors ...RequestEditorFn) (*DatasetsGetRunResponse, error) {
	rsp, err := c.DatasetsGetRun(ctx, datasetName, runName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetsGetRunResponse(rsp)
}

// HealthHealthWithResponse request returning *HealthHealthResponse
func (c *ClientWithResponses) HealthHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthHealthResponse, error) {
	rsp, err := c.HealthHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthHealthResponse(rsp)
}

// IngestionBatchWithBodyWithResponse request with arbitrary body returning *IngestionBatchResponse
func (c *ClientWithResponses) IngestionBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IngestionBatchResponse, error) {
	rsp, err := c.IngestionBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIngestionBatchResponse(rsp)
}

func (c *ClientWithResponses) IngestionBatchWithResponse(ctx context.Context, body IngestionBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*IngestionBatchResponse, error) {
	rsp, err := c.IngestionBatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIngestionBatchResponse(rsp)
}

// MediaGetUploadUrlWithBodyWithResponse request with arbitrary body returning *MediaGetUploadUrlResponse
func (c *ClientWithResponses) MediaGetUploadUrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MediaGetUploadUrlResponse, error) {
	rsp, err := c.MediaGetUploadUrlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaGetUploadUrlResponse(rsp)
}

func (c *ClientWithResponses) MediaGetUploadUrlWithResponse(ctx context.Context, body MediaGetUploadUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*MediaGetUploadUrlResponse, error) {
	rsp, err := c.MediaGetUploadUrl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaGetUploadUrlResponse(rsp)
}

// MediaGetWithResponse request returning *MediaGetResponse
func (c *ClientWithResponses) MediaGetWithResponse(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*MediaGetResponse, error) {
	rsp, err := c.MediaGet(ctx, mediaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaGetResponse(rsp)
}

// MediaPatchWithBodyWithResponse request with arbitrary body returning *MediaPatchResponse
func (c *ClientWithResponses) MediaPatchWithBodyWithResponse(ctx context.Context, mediaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MediaPatchResponse, error) {
	rsp, err := c.MediaPatchWithBody(ctx, mediaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaPatchResponse(rsp)
}

func (c *ClientWithResponses) MediaPatchWithResponse(ctx context.Context, mediaId string, body MediaPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*MediaPatchResponse, error) {
	rsp, err := c.MediaPatch(ctx, mediaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaPatchResponse(rsp)
}

// MetricsMetricsWithResponse request returning *MetricsMetricsResponse
func (c *ClientWithResponses) MetricsMetricsWithResponse(ctx context.Context, params *MetricsMetricsParams, reqEditors ...RequestEditorFn) (*MetricsMetricsResponse, error) {
	rsp, err := c.MetricsMetrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsMetricsResponse(rsp)
}

// ModelsListWithResponse request returning *ModelsListResponse
func (c *ClientWithResponses) ModelsListWithResponse(ctx context.Context, params *ModelsListParams, reqEditors ...RequestEditorFn) (*ModelsListResponse, error) {
	rsp, err := c.ModelsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsListResponse(rsp)
}

// ModelsCreateWithBodyWithResponse request with arbitrary body returning *ModelsCreateResponse
func (c *ClientWithResponses) ModelsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModelsCreateResponse, error) {
	rsp, err := c.ModelsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsCreateResponse(rsp)
}

func (c *ClientWithResponses) ModelsCreateWithResponse(ctx context.Context, body ModelsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModelsCreateResponse, error) {
	rsp, err := c.ModelsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsCreateResponse(rsp)
}

// ModelsDeleteWithResponse request returning *ModelsDeleteResponse
func (c *ClientWithResponses) ModelsDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ModelsDeleteResponse, error) {
	rsp, err := c.ModelsDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsDeleteResponse(rsp)
}

// ModelsGetWithResponse request returning *ModelsGetResponse
func (c *ClientWithResponses) ModelsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ModelsGetResponse, error) {
	rsp, err := c.ModelsGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsGetResponse(rsp)
}

// ObservationsGetManyWithResponse request returning *ObservationsGetManyResponse
func (c *ClientWithResponses) ObservationsGetManyWithResponse(ctx context.Context, params *ObservationsGetManyParams, reqEditors ...RequestEditorFn) (*ObservationsGetManyResponse, error) {
	rsp, err := c.ObservationsGetMany(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObservationsGetManyResponse(rsp)
}

// ObservationsGetWithResponse request returning *ObservationsGetResponse
func (c *ClientWithResponses) ObservationsGetWithResponse(ctx context.Context, observationId string, reqEditors ...RequestEditorFn) (*ObservationsGetResponse, error) {
	rsp, err := c.ObservationsGet(ctx, observationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseObservationsGetResponse(rsp)
}

// OrganizationsGetOrganizationMembershipsWithResponse request returning *OrganizationsGetOrganizationMembershipsResponse
func (c *ClientWithResponses) OrganizationsGetOrganizationMembershipsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganizationsGetOrganizationMembershipsResponse, error) {
	rsp, err := c.OrganizationsGetOrganizationMemberships(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsGetOrganizationMembershipsResponse(rsp)
}

// OrganizationsUpdateOrganizationMembershipWithBodyWithResponse request with arbitrary body returning *OrganizationsUpdateOrganizationMembershipResponse
func (c *ClientWithResponses) OrganizationsUpdateOrganizationMembershipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationsUpdateOrganizationMembershipResponse, error) {
	rsp, err := c.OrganizationsUpdateOrganizationMembershipWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsUpdateOrganizationMembershipResponse(rsp)
}

func (c *ClientWithResponses) OrganizationsUpdateOrganizationMembershipWithResponse(ctx context.Context, body OrganizationsUpdateOrganizationMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationsUpdateOrganizationMembershipResponse, error) {
	rsp, err := c.OrganizationsUpdateOrganizationMembership(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsUpdateOrganizationMembershipResponse(rsp)
}

// OrganizationsGetOrganizationProjectsWithResponse request returning *OrganizationsGetOrganizationProjectsResponse
func (c *ClientWithResponses) OrganizationsGetOrganizationProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganizationsGetOrganizationProjectsResponse, error) {
	rsp, err := c.OrganizationsGetOrganizationProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsGetOrganizationProjectsResponse(rsp)
}

// ProjectsGetWithResponse request returning *ProjectsGetResponse
func (c *ClientWithResponses) ProjectsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProjectsGetResponse, error) {
	rsp, err := c.ProjectsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsGetResponse(rsp)
}

// ProjectsCreateWithBodyWithResponse request with arbitrary body returning *ProjectsCreateResponse
func (c *ClientWithResponses) ProjectsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectsCreateResponse, error) {
	rsp, err := c.ProjectsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProjectsCreateWithResponse(ctx context.Context, body ProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectsCreateResponse, error) {
	rsp, err := c.ProjectsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsCreateResponse(rsp)
}

// ProjectsDeleteWithResponse request returning *ProjectsDeleteResponse
func (c *ClientWithResponses) ProjectsDeleteWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ProjectsDeleteResponse, error) {
	rsp, err := c.ProjectsDelete(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsDeleteResponse(rsp)
}

// ProjectsUpdateWithBodyWithResponse request with arbitrary body returning *ProjectsUpdateResponse
func (c *ClientWithResponses) ProjectsUpdateWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectsUpdateResponse, error) {
	rsp, err := c.ProjectsUpdateWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProjectsUpdateWithResponse(ctx context.Context, projectId string, body ProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectsUpdateResponse, error) {
	rsp, err := c.ProjectsUpdate(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsUpdateResponse(rsp)
}

// ProjectsGetApiKeysWithResponse request returning *ProjectsGetApiKeysResponse
func (c *ClientWithResponses) ProjectsGetApiKeysWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ProjectsGetApiKeysResponse, error) {
	rsp, err := c.ProjectsGetApiKeys(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsGetApiKeysResponse(rsp)
}

// ProjectsCreateApiKeyWithBodyWithResponse request with arbitrary body returning *ProjectsCreateApiKeyResponse
func (c *ClientWithResponses) ProjectsCreateApiKeyWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectsCreateApiKeyResponse, error) {
	rsp, err := c.ProjectsCreateApiKeyWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsCreateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) ProjectsCreateApiKeyWithResponse(ctx context.Context, projectId string, body ProjectsCreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectsCreateApiKeyResponse, error) {
	rsp, err := c.ProjectsCreateApiKey(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsCreateApiKeyResponse(rsp)
}

// ProjectsDeleteApiKeyWithResponse request returning *ProjectsDeleteApiKeyResponse
func (c *ClientWithResponses) ProjectsDeleteApiKeyWithResponse(ctx context.Context, projectId string, apiKeyId string, reqEditors ...RequestEditorFn) (*ProjectsDeleteApiKeyResponse, error) {
	rsp, err := c.ProjectsDeleteApiKey(ctx, projectId, apiKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsDeleteApiKeyResponse(rsp)
}

// OrganizationsGetProjectMembershipsWithResponse request returning *OrganizationsGetProjectMembershipsResponse
func (c *ClientWithResponses) OrganizationsGetProjectMembershipsWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*OrganizationsGetProjectMembershipsResponse, error) {
	rsp, err := c.OrganizationsGetProjectMemberships(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsGetProjectMembershipsResponse(rsp)
}

// OrganizationsUpdateProjectMembershipWithBodyWithResponse request with arbitrary body returning *OrganizationsUpdateProjectMembershipResponse
func (c *ClientWithResponses) OrganizationsUpdateProjectMembershipWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationsUpdateProjectMembershipResponse, error) {
	rsp, err := c.OrganizationsUpdateProjectMembershipWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsUpdateProjectMembershipResponse(rsp)
}

func (c *ClientWithResponses) OrganizationsUpdateProjectMembershipWithResponse(ctx context.Context, projectId string, body OrganizationsUpdateProjectMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationsUpdateProjectMembershipResponse, error) {
	rsp, err := c.OrganizationsUpdateProjectMembership(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsUpdateProjectMembershipResponse(rsp)
}

// ScimGetResourceTypesWithResponse request returning *ScimGetResourceTypesResponse
func (c *ClientWithResponses) ScimGetResourceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScimGetResourceTypesResponse, error) {
	rsp, err := c.ScimGetResourceTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScimGetResourceTypesResponse(rsp)
}

// ScimGetSchemasWithResponse request returning *ScimGetSchemasResponse
func (c *ClientWithResponses) ScimGetSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScimGetSchemasResponse, error) {
	rsp, err := c.ScimGetSchemas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScimGetSchemasResponse(rsp)
}

// ScimGetServiceProviderConfigWithResponse request returning *ScimGetServiceProviderConfigResponse
func (c *ClientWithResponses) ScimGetServiceProviderConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScimGetServiceProviderConfigResponse, error) {
	rsp, err := c.ScimGetServiceProviderConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScimGetServiceProviderConfigResponse(rsp)
}

// ScimListUsersWithResponse request returning *ScimListUsersResponse
func (c *ClientWithResponses) ScimListUsersWithResponse(ctx context.Context, params *ScimListUsersParams, reqEditors ...RequestEditorFn) (*ScimListUsersResponse, error) {
	rsp, err := c.ScimListUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScimListUsersResponse(rsp)
}

// ScimCreateUserWithBodyWithResponse request with arbitrary body returning *ScimCreateUserResponse
func (c *ClientWithResponses) ScimCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScimCreateUserResponse, error) {
	rsp, err := c.ScimCreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScimCreateUserResponse(rsp)
}

func (c *ClientWithResponses) ScimCreateUserWithResponse(ctx context.Context, body ScimCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ScimCreateUserResponse, error) {
	rsp, err := c.ScimCreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScimCreateUserResponse(rsp)
}

// ScimDeleteUserWithResponse request returning *ScimDeleteUserResponse
func (c *ClientWithResponses) ScimDeleteUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*ScimDeleteUserResponse, error) {
	rsp, err := c.ScimDeleteUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScimDeleteUserResponse(rsp)
}

// ScimGetUserWithResponse request returning *ScimGetUserResponse
func (c *ClientWithResponses) ScimGetUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*ScimGetUserResponse, error) {
	rsp, err := c.ScimGetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScimGetUserResponse(rsp)
}

// ScoreConfigsGetWithResponse request returning *ScoreConfigsGetResponse
func (c *ClientWithResponses) ScoreConfigsGetWithResponse(ctx context.Context, params *ScoreConfigsGetParams, reqEditors ...RequestEditorFn) (*ScoreConfigsGetResponse, error) {
	rsp, err := c.ScoreConfigsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreConfigsGetResponse(rsp)
}

// ScoreConfigsCreateWithBodyWithResponse request with arbitrary body returning *ScoreConfigsCreateResponse
func (c *ClientWithResponses) ScoreConfigsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScoreConfigsCreateResponse, error) {
	rsp, err := c.ScoreConfigsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreConfigsCreateResponse(rsp)
}

func (c *ClientWithResponses) ScoreConfigsCreateWithResponse(ctx context.Context, body ScoreConfigsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ScoreConfigsCreateResponse, error) {
	rsp, err := c.ScoreConfigsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreConfigsCreateResponse(rsp)
}

// ScoreConfigsGetByIdWithResponse request returning *ScoreConfigsGetByIdResponse
func (c *ClientWithResponses) ScoreConfigsGetByIdWithResponse(ctx context.Context, configId string, reqEditors ...RequestEditorFn) (*ScoreConfigsGetByIdResponse, error) {
	rsp, err := c.ScoreConfigsGetById(ctx, configId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreConfigsGetByIdResponse(rsp)
}

// ScoreCreateWithBodyWithResponse request with arbitrary body returning *ScoreCreateResponse
func (c *ClientWithResponses) ScoreCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScoreCreateResponse, error) {
	rsp, err := c.ScoreCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreCreateResponse(rsp)
}

func (c *ClientWithResponses) ScoreCreateWithResponse(ctx context.Context, body ScoreCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ScoreCreateResponse, error) {
	rsp, err := c.ScoreCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreCreateResponse(rsp)
}

// ScoreDeleteWithResponse request returning *ScoreDeleteResponse
func (c *ClientWithResponses) ScoreDeleteWithResponse(ctx context.Context, scoreId string, reqEditors ...RequestEditorFn) (*ScoreDeleteResponse, error) {
	rsp, err := c.ScoreDelete(ctx, scoreId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreDeleteResponse(rsp)
}

// SessionsListWithResponse request returning *SessionsListResponse
func (c *ClientWithResponses) SessionsListWithResponse(ctx context.Context, params *SessionsListParams, reqEditors ...RequestEditorFn) (*SessionsListResponse, error) {
	rsp, err := c.SessionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSessionsListResponse(rsp)
}

// SessionsGetWithResponse request returning *SessionsGetResponse
func (c *ClientWithResponses) SessionsGetWithResponse(ctx context.Context, sessionId string, reqEditors ...RequestEditorFn) (*SessionsGetResponse, error) {
	rsp, err := c.SessionsGet(ctx, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSessionsGetResponse(rsp)
}

// TraceDeleteMultipleWithBodyWithResponse request with arbitrary body returning *TraceDeleteMultipleResponse
func (c *ClientWithResponses) TraceDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TraceDeleteMultipleResponse, error) {
	rsp, err := c.TraceDeleteMultipleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceDeleteMultipleResponse(rsp)
}

func (c *ClientWithResponses) TraceDeleteMultipleWithResponse(ctx context.Context, body TraceDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*TraceDeleteMultipleResponse, error) {
	rsp, err := c.TraceDeleteMultiple(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceDeleteMultipleResponse(rsp)
}

// TraceListWithResponse request returning *TraceListResponse
func (c *ClientWithResponses) TraceListWithResponse(ctx context.Context, params *TraceListParams, reqEditors ...RequestEditorFn) (*TraceListResponse, error) {
	rsp, err := c.TraceList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceListResponse(rsp)
}

// TraceDeleteWithResponse request returning *TraceDeleteResponse
func (c *ClientWithResponses) TraceDeleteWithResponse(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*TraceDeleteResponse, error) {
	rsp, err := c.TraceDelete(ctx, traceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceDeleteResponse(rsp)
}

// TraceGetWithResponse request returning *TraceGetResponse
func (c *ClientWithResponses) TraceGetWithResponse(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*TraceGetResponse, error) {
	rsp, err := c.TraceGet(ctx, traceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceGetResponse(rsp)
}

// DatasetsListWithResponse request returning *DatasetsListResponse
func (c *ClientWithResponses) DatasetsListWithResponse(ctx context.Context, params *DatasetsListParams, reqEditors ...RequestEditorFn) (*DatasetsListResponse, error) {
	rsp, err := c.DatasetsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetsListResponse(rsp)
}

// DatasetsCreateWithBodyWithResponse request with arbitrary body returning *DatasetsCreateResponse
func (c *ClientWithResponses) DatasetsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DatasetsCreateResponse, error) {
	rsp, err := c.DatasetsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetsCreateResponse(rsp)
}

func (c *ClientWithResponses) DatasetsCreateWithResponse(ctx context.Context, body DatasetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DatasetsCreateResponse, error) {
	rsp, err := c.DatasetsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetsCreateResponse(rsp)
}

// DatasetsGetWithResponse request returning *DatasetsGetResponse
func (c *ClientWithResponses) DatasetsGetWithResponse(ctx context.Context, datasetName string, reqEditors ...RequestEditorFn) (*DatasetsGetResponse, error) {
	rsp, err := c.DatasetsGet(ctx, datasetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDatasetsGetResponse(rsp)
}

// PromptsListWithResponse request returning *PromptsListResponse
func (c *ClientWithResponses) PromptsListWithResponse(ctx context.Context, params *PromptsListParams, reqEditors ...RequestEditorFn) (*PromptsListResponse, error) {
	rsp, err := c.PromptsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptsListResponse(rsp)
}

// PromptsCreateWithBodyWithResponse request with arbitrary body returning *PromptsCreateResponse
func (c *ClientWithResponses) PromptsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PromptsCreateResponse, error) {
	rsp, err := c.PromptsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptsCreateResponse(rsp)
}

func (c *ClientWithResponses) PromptsCreateWithResponse(ctx context.Context, body PromptsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PromptsCreateResponse, error) {
	rsp, err := c.PromptsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptsCreateResponse(rsp)
}

// PromptVersionUpdateWithBodyWithResponse request with arbitrary body returning *PromptVersionUpdateResponse
func (c *ClientWithResponses) PromptVersionUpdateWithBodyWithResponse(ctx context.Context, name string, version int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PromptVersionUpdateResponse, error) {
	rsp, err := c.PromptVersionUpdateWithBody(ctx, name, version, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptVersionUpdateResponse(rsp)
}

func (c *ClientWithResponses) PromptVersionUpdateWithResponse(ctx context.Context, name string, version int, body PromptVersionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PromptVersionUpdateResponse, error) {
	rsp, err := c.PromptVersionUpdate(ctx, name, version, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptVersionUpdateResponse(rsp)
}

// PromptsGetWithResponse request returning *PromptsGetResponse
func (c *ClientWithResponses) PromptsGetWithResponse(ctx context.Context, promptName string, params *PromptsGetParams, reqEditors ...RequestEditorFn) (*PromptsGetResponse, error) {
	rsp, err := c.PromptsGet(ctx, promptName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptsGetResponse(rsp)
}

// ScoreV2GetWithResponse request returning *ScoreV2GetResponse
func (c *ClientWithResponses) ScoreV2GetWithResponse(ctx context.Context, params *ScoreV2GetParams, reqEditors ...RequestEditorFn) (*ScoreV2GetResponse, error) {
	rsp, err := c.ScoreV2Get(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreV2GetResponse(rsp)
}

// ScoreV2GetByIdWithResponse request returning *ScoreV2GetByIdResponse
func (c *ClientWithResponses) ScoreV2GetByIdWithResponse(ctx context.Context, scoreId string, reqEditors ...RequestEditorFn) (*ScoreV2GetByIdResponse, error) {
	rsp, err := c.ScoreV2GetById(ctx, scoreId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreV2GetByIdResponse(rsp)
}

// ParseAnnotationQueuesListQueuesResponse parses an HTTP response from a AnnotationQueuesListQueuesWithResponse call
func ParseAnnotationQueuesListQueuesResponse(rsp *http.Response) (*AnnotationQueuesListQueuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnnotationQueuesListQueuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAnnotationQueues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseAnnotationQueuesGetQueueResponse parses an HTTP response from a AnnotationQueuesGetQueueWithResponse call
func ParseAnnotationQueuesGetQueueResponse(rsp *http.Response) (*AnnotationQueuesGetQueueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnnotationQueuesGetQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnnotationQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseAnnotationQueuesListQueueItemsResponse parses an HTTP response from a AnnotationQueuesListQueueItemsWithResponse call
func ParseAnnotationQueuesListQueueItemsResponse(rsp *http.Response) (*AnnotationQueuesListQueueItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnnotationQueuesListQueueItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAnnotationQueueItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseAnnotationQueuesCreateQueueItemResponse parses an HTTP response from a AnnotationQueuesCreateQueueItemWithResponse call
func ParseAnnotationQueuesCreateQueueItemResponse(rsp *http.Response) (*AnnotationQueuesCreateQueueItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnnotationQueuesCreateQueueItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnnotationQueueItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseAnnotationQueuesDeleteQueueItemResponse parses an HTTP response from a AnnotationQueuesDeleteQueueItemWithResponse call
func ParseAnnotationQueuesDeleteQueueItemResponse(rsp *http.Response) (*AnnotationQueuesDeleteQueueItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnnotationQueuesDeleteQueueItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteAnnotationQueueItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseAnnotationQueuesGetQueueItemResponse parses an HTTP response from a AnnotationQueuesGetQueueItemWithResponse call
func ParseAnnotationQueuesGetQueueItemResponse(rsp *http.Response) (*AnnotationQueuesGetQueueItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnnotationQueuesGetQueueItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnnotationQueueItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseAnnotationQueuesUpdateQueueItemResponse parses an HTTP response from a AnnotationQueuesUpdateQueueItemWithResponse call
func ParseAnnotationQueuesUpdateQueueItemResponse(rsp *http.Response) (*AnnotationQueuesUpdateQueueItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnnotationQueuesUpdateQueueItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnnotationQueueItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCommentsGetResponse parses an HTTP response from a CommentsGetWithResponse call
func ParseCommentsGetResponse(rsp *http.Response) (*CommentsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommentsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCommentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCommentsCreateResponse parses an HTTP response from a CommentsCreateWithResponse call
func ParseCommentsCreateResponse(rsp *http.Response) (*CommentsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommentsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCommentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCommentsGetByIdResponse parses an HTTP response from a CommentsGetByIdWithResponse call
func ParseCommentsGetByIdResponse(rsp *http.Response) (*CommentsGetByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommentsGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Comment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetItemsListResponse parses an HTTP response from a DatasetItemsListWithResponse call
func ParseDatasetItemsListResponse(rsp *http.Response) (*DatasetItemsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetItemsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDatasetItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetItemsCreateResponse parses an HTTP response from a DatasetItemsCreateWithResponse call
func ParseDatasetItemsCreateResponse(rsp *http.Response) (*DatasetItemsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetItemsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatasetItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetItemsDeleteResponse parses an HTTP response from a DatasetItemsDeleteWithResponse call
func ParseDatasetItemsDeleteResponse(rsp *http.Response) (*DatasetItemsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetItemsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteDatasetItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetItemsGetResponse parses an HTTP response from a DatasetItemsGetWithResponse call
func ParseDatasetItemsGetResponse(rsp *http.Response) (*DatasetItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatasetItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetRunItemsListResponse parses an HTTP response from a DatasetRunItemsListWithResponse call
func ParseDatasetRunItemsListResponse(rsp *http.Response) (*DatasetRunItemsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetRunItemsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDatasetRunItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetRunItemsCreateResponse parses an HTTP response from a DatasetRunItemsCreateWithResponse call
func ParseDatasetRunItemsCreateResponse(rsp *http.Response) (*DatasetRunItemsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetRunItemsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatasetRunItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetsGetRunsResponse parses an HTTP response from a DatasetsGetRunsWithResponse call
func ParseDatasetsGetRunsResponse(rsp *http.Response) (*DatasetsGetRunsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetsGetRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDatasetRuns
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetsDeleteRunResponse parses an HTTP response from a DatasetsDeleteRunWithResponse call
func ParseDatasetsDeleteRunResponse(rsp *http.Response) (*DatasetsDeleteRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetsDeleteRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteDatasetRunResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetsGetRunResponse parses an HTTP response from a DatasetsGetRunWithResponse call
func ParseDatasetsGetRunResponse(rsp *http.Response) (*DatasetsGetRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetsGetRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatasetRunWithItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseHealthHealthResponse parses an HTTP response from a HealthHealthWithResponse call
func ParseHealthHealthResponse(rsp *http.Response) (*HealthHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseIngestionBatchResponse parses an HTTP response from a IngestionBatchWithResponse call
func ParseIngestionBatchResponse(rsp *http.Response) (*IngestionBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IngestionBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest IngestionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseMediaGetUploadUrlResponse parses an HTTP response from a MediaGetUploadUrlWithResponse call
func ParseMediaGetUploadUrlResponse(rsp *http.Response) (*MediaGetUploadUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaGetUploadUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMediaUploadUrlResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseMediaGetResponse parses an HTTP response from a MediaGetWithResponse call
func ParseMediaGetResponse(rsp *http.Response) (*MediaGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMediaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseMediaPatchResponse parses an HTTP response from a MediaPatchWithResponse call
func ParseMediaPatchResponse(rsp *http.Response) (*MediaPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseMetricsMetricsResponse parses an HTTP response from a MetricsMetricsWithResponse call
func ParseMetricsMetricsResponse(rsp *http.Response) (*MetricsMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseModelsListResponse parses an HTTP response from a ModelsListWithResponse call
func ParseModelsListResponse(rsp *http.Response) (*ModelsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModelsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedModels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseModelsCreateResponse parses an HTTP response from a ModelsCreateWithResponse call
func ParseModelsCreateResponse(rsp *http.Response) (*ModelsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModelsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseModelsDeleteResponse parses an HTTP response from a ModelsDeleteWithResponse call
func ParseModelsDeleteResponse(rsp *http.Response) (*ModelsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModelsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseModelsGetResponse parses an HTTP response from a ModelsGetWithResponse call
func ParseModelsGetResponse(rsp *http.Response) (*ModelsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModelsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseObservationsGetManyResponse parses an HTTP response from a ObservationsGetManyWithResponse call
func ParseObservationsGetManyResponse(rsp *http.Response) (*ObservationsGetManyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObservationsGetManyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObservationsViews
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseObservationsGetResponse parses an HTTP response from a ObservationsGetWithResponse call
func ParseObservationsGetResponse(rsp *http.Response) (*ObservationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ObservationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObservationsView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseOrganizationsGetOrganizationMembershipsResponse parses an HTTP response from a OrganizationsGetOrganizationMembershipsWithResponse call
func ParseOrganizationsGetOrganizationMembershipsResponse(rsp *http.Response) (*OrganizationsGetOrganizationMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationsGetOrganizationMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseOrganizationsUpdateOrganizationMembershipResponse parses an HTTP response from a OrganizationsUpdateOrganizationMembershipWithResponse call
func ParseOrganizationsUpdateOrganizationMembershipResponse(rsp *http.Response) (*OrganizationsUpdateOrganizationMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationsUpdateOrganizationMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseOrganizationsGetOrganizationProjectsResponse parses an HTTP response from a OrganizationsGetOrganizationProjectsWithResponse call
func ParseOrganizationsGetOrganizationProjectsResponse(rsp *http.Response) (*OrganizationsGetOrganizationProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationsGetOrganizationProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationProjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseProjectsGetResponse parses an HTTP response from a ProjectsGetWithResponse call
func ParseProjectsGetResponse(rsp *http.Response) (*ProjectsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseProjectsCreateResponse parses an HTTP response from a ProjectsCreateWithResponse call
func ParseProjectsCreateResponse(rsp *http.Response) (*ProjectsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseProjectsDeleteResponse parses an HTTP response from a ProjectsDeleteWithResponse call
func ParseProjectsDeleteResponse(rsp *http.Response) (*ProjectsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ProjectDeletionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseProjectsUpdateResponse parses an HTTP response from a ProjectsUpdateWithResponse call
func ParseProjectsUpdateResponse(rsp *http.Response) (*ProjectsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseProjectsGetApiKeysResponse parses an HTTP response from a ProjectsGetApiKeysWithResponse call
func ParseProjectsGetApiKeysResponse(rsp *http.Response) (*ProjectsGetApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectsGetApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseProjectsCreateApiKeyResponse parses an HTTP response from a ProjectsCreateApiKeyWithResponse call
func ParseProjectsCreateApiKeyResponse(rsp *http.Response) (*ProjectsCreateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectsCreateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseProjectsDeleteApiKeyResponse parses an HTTP response from a ProjectsDeleteApiKeyWithResponse call
func ParseProjectsDeleteApiKeyResponse(rsp *http.Response) (*ProjectsDeleteApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectsDeleteApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeyDeletionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseOrganizationsGetProjectMembershipsResponse parses an HTTP response from a OrganizationsGetProjectMembershipsWithResponse call
func ParseOrganizationsGetProjectMembershipsResponse(rsp *http.Response) (*OrganizationsGetProjectMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationsGetProjectMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseOrganizationsUpdateProjectMembershipResponse parses an HTTP response from a OrganizationsUpdateProjectMembershipWithResponse call
func ParseOrganizationsUpdateProjectMembershipResponse(rsp *http.Response) (*OrganizationsUpdateProjectMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationsUpdateProjectMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScimGetResourceTypesResponse parses an HTTP response from a ScimGetResourceTypesWithResponse call
func ParseScimGetResourceTypesResponse(rsp *http.Response) (*ScimGetResourceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScimGetResourceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceTypesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScimGetSchemasResponse parses an HTTP response from a ScimGetSchemasWithResponse call
func ParseScimGetSchemasResponse(rsp *http.Response) (*ScimGetSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScimGetSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchemasResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScimGetServiceProviderConfigResponse parses an HTTP response from a ScimGetServiceProviderConfigWithResponse call
func ParseScimGetServiceProviderConfigResponse(rsp *http.Response) (*ScimGetServiceProviderConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScimGetServiceProviderConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceProviderConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScimListUsersResponse parses an HTTP response from a ScimListUsersWithResponse call
func ParseScimListUsersResponse(rsp *http.Response) (*ScimListUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScimListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScimUsersListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScimCreateUserResponse parses an HTTP response from a ScimCreateUserWithResponse call
func ParseScimCreateUserResponse(rsp *http.Response) (*ScimCreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScimCreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScimUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScimDeleteUserResponse parses an HTTP response from a ScimDeleteUserWithResponse call
func ParseScimDeleteUserResponse(rsp *http.Response) (*ScimDeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScimDeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScimGetUserResponse parses an HTTP response from a ScimGetUserWithResponse call
func ParseScimGetUserResponse(rsp *http.Response) (*ScimGetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScimGetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScimUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScoreConfigsGetResponse parses an HTTP response from a ScoreConfigsGetWithResponse call
func ParseScoreConfigsGetResponse(rsp *http.Response) (*ScoreConfigsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScoreConfigsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScoreConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScoreConfigsCreateResponse parses an HTTP response from a ScoreConfigsCreateWithResponse call
func ParseScoreConfigsCreateResponse(rsp *http.Response) (*ScoreConfigsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScoreConfigsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScoreConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScoreConfigsGetByIdResponse parses an HTTP response from a ScoreConfigsGetByIdWithResponse call
func ParseScoreConfigsGetByIdResponse(rsp *http.Response) (*ScoreConfigsGetByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScoreConfigsGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScoreConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScoreCreateResponse parses an HTTP response from a ScoreCreateWithResponse call
func ParseScoreCreateResponse(rsp *http.Response) (*ScoreCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScoreCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateScoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScoreDeleteResponse parses an HTTP response from a ScoreDeleteWithResponse call
func ParseScoreDeleteResponse(rsp *http.Response) (*ScoreDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScoreDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseSessionsListResponse parses an HTTP response from a SessionsListWithResponse call
func ParseSessionsListResponse(rsp *http.Response) (*SessionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SessionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSessions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseSessionsGetResponse parses an HTTP response from a SessionsGetWithResponse call
func ParseSessionsGetResponse(rsp *http.Response) (*SessionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SessionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionWithTraces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseTraceDeleteMultipleResponse parses an HTTP response from a TraceDeleteMultipleWithResponse call
func ParseTraceDeleteMultipleResponse(rsp *http.Response) (*TraceDeleteMultipleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceDeleteMultipleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteTraceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseTraceListResponse parses an HTTP response from a TraceListWithResponse call
func ParseTraceListResponse(rsp *http.Response) (*TraceListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Traces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseTraceDeleteResponse parses an HTTP response from a TraceDeleteWithResponse call
func ParseTraceDeleteResponse(rsp *http.Response) (*TraceDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteTraceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseTraceGetResponse parses an HTTP response from a TraceGetWithResponse call
func ParseTraceGetResponse(rsp *http.Response) (*TraceGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TraceWithFullDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetsListResponse parses an HTTP response from a DatasetsListWithResponse call
func ParseDatasetsListResponse(rsp *http.Response) (*DatasetsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDatasets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetsCreateResponse parses an HTTP response from a DatasetsCreateWithResponse call
func ParseDatasetsCreateResponse(rsp *http.Response) (*DatasetsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDatasetsGetResponse parses an HTTP response from a DatasetsGetWithResponse call
func ParseDatasetsGetResponse(rsp *http.Response) (*DatasetsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DatasetsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePromptsListResponse parses an HTTP response from a PromptsListWithResponse call
func ParsePromptsListResponse(rsp *http.Response) (*PromptsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PromptsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PromptMetaListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePromptsCreateResponse parses an HTTP response from a PromptsCreateWithResponse call
func ParsePromptsCreateResponse(rsp *http.Response) (*PromptsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PromptsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prompt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePromptVersionUpdateResponse parses an HTTP response from a PromptVersionUpdateWithResponse call
func ParsePromptVersionUpdateResponse(rsp *http.Response) (*PromptVersionUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PromptVersionUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prompt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePromptsGetResponse parses an HTTP response from a PromptsGetWithResponse call
func ParsePromptsGetResponse(rsp *http.Response) (*PromptsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PromptsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prompt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScoreV2GetResponse parses an HTTP response from a ScoreV2GetWithResponse call
func ParseScoreV2GetResponse(rsp *http.Response) (*ScoreV2GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScoreV2GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetScoresResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseScoreV2GetByIdResponse parses an HTTP response from a ScoreV2GetByIdWithResponse call
func ParseScoreV2GetByIdResponse(rsp *http.Response) (*ScoreV2GetByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScoreV2GetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Score
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}
